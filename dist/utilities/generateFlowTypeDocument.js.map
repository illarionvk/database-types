{"version":3,"sources":["../../src/utilities/generateFlowTypeDocument.js"],"names":["generateFlowTypeDeclarationBody","properties","sortedProperties","propertyDeclarations","column","push","name","type","join","columns","groupedProperties","typeDeclarations","typeNames","Object","keys","typeName","typeProperties","typeDeclaration","split"],"mappings":";;;;;;AAEA;;AAQA,MAAMA,kCAAmCC,UAAD,IAA0D;AAChG,QAAMC,mBAAmB,oBAAOD,UAAP,EAAmB,MAAnB,CAAzB;;AAEA,QAAME,uBAAuB,EAA7B;;AAHgG;AAAA;AAAA;;AAAA;AAKhG,yBAAqBD,gBAArB,8HAAuC;AAAA,YAA5BE,MAA4B;;AACrCD,2BAAqBE,IAArB,CAA0B,MAAMD,OAAOE,IAAb,GAAoB,IAApB,GAA2BF,OAAOG,IAA5D;AACD;AAP+F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAShG,SAAOJ,qBAAqBK,IAArB,CAA0B,IAA1B,CAAP;AACD,CAVD;;kBAaEC,OADa,IAEF;AACX,QAAMC,oBAAoB,qBAAQD,OAAR,EAAiB,UAAjB,CAA1B;;AAEA,QAAME,mBAAmB,EAAzB;;AAEA,QAAMC,YAAYC,OAAOC,IAAP,CAAYJ,iBAAZ,CAAlB;;AALW;AAAA;AAAA;;AAAA;AAOX,0BAAuBE,SAAvB,mIAAkC;AAAA,YAAvBG,QAAuB;;AAChC,YAAMC,iBAAiBN,kBAAkBK,QAAlB,CAAvB;;AAEA,YAAME,kBAAmB;cACfF,QAAS;IACnBf,gCAAgCgB,cAAhC,EAAgDE,KAAhD,CAAsD,IAAtD,EAA4DV,IAA5D,CAAiE,OAAjE,CAA0E;IAF1E;;AAKAG,uBAAiBN,IAAjB,CAAsBY,eAAtB;AACD;AAhBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBX,SAAON,iBAAiBH,IAAjB,CAAsB,IAAtB,CAAP;AACD,C","file":"generateFlowTypeDocument.js","sourcesContent":["// @flow\n\nimport {\n  groupBy,\n  sortBy\n} from 'lodash';\nimport type {\n  TypePropertyType\n} from '../types';\n\nconst generateFlowTypeDeclarationBody = (properties: $ReadOnlyArray<TypePropertyType>): string => {\n  const sortedProperties = sortBy(properties, 'name');\n\n  const propertyDeclarations = [];\n\n  for (const column of sortedProperties) {\n    propertyDeclarations.push('+' + column.name + ': ' + column.type);\n  }\n\n  return propertyDeclarations.join('\\n');\n};\n\nexport default (\n  columns: $ReadOnlyArray<TypePropertyType>\n): string => {\n  const groupedProperties = groupBy(columns, 'typeName');\n\n  const typeDeclarations = [];\n\n  const typeNames = Object.keys(groupedProperties);\n\n  for (const typeName of typeNames) {\n    const typeProperties = groupedProperties[typeName];\n\n    const typeDeclaration = `\nexport type ${typeName} = {|\n  ${generateFlowTypeDeclarationBody(typeProperties).split('\\n').join(',\\n  ')}\n|};`;\n\n    typeDeclarations.push(typeDeclaration);\n  }\n\n  return typeDeclarations.join('\\n');\n};\n"]}