{"version":3,"sources":["../../src/queries/getUserDefinedEnums.js"],"names":["connection","any","sql"],"mappings":";;;;;;AAEA;;;;;+BASe,WAAOA,UAAP,EAAiF;AAC9F,WAAOA,WAAWC,GAAX,CAAeC,aAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAnB,CAAP;AAiCD,G","file":"getUserDefinedEnums.js","sourcesContent":["// @flow\n\nimport {\n  sql\n} from 'mightyql';\n\nimport type {\n  DatabaseConnectionType,\n  EnumType\n} from '../types';\n\nexport default async (connection: DatabaseConnectionType): Promise<$ReadOnlyArray<EnumType>> => {\n  return connection.any(sql`\nWITH udt AS (\n  SELECT n.nspname                                    AS schema,\n       format_type(t.oid, NULL)                     AS name,\n       t.typname                                    AS internal_name,\n       nullif(array_to_string(\n           ARRAY(SELECT e.enumlabel\n                 FROM pg_catalog.pg_enum e\n                 WHERE e.enumtypid = t.oid\n                 ORDER BY e.oid), E' | '\n         ), '')                                         AS values,\n       obj_description(t.oid, 'pg_type') AS description\nFROM pg_catalog.pg_type t\n       LEFT JOIN pg_catalog.pg_namespace n\n                 ON n.oid = t.typnamespace\nWHERE (t.typrelid = 0\n  OR (SELECT c.relkind = 'c'\n      FROM pg_catalog.pg_class c\n      WHERE c.oid = t.typrelid\n       )\n  )\n  AND NOT EXISTS\n  (SELECT 1\n   FROM pg_catalog.pg_type el\n   WHERE el.oid = t.typelem\n     AND el.typarray = t.oid\n  )\n  AND n.nspname <> 'pg_catalog'\n  AND n.nspname <> 'information_schema'\n  AND pg_catalog.pg_type_is_visible(t.oid)\nORDER BY 1, 2\n) SELECT name, values, description FROM udt WHERE values IS NOT NULL;\n  `);\n};\n"]}